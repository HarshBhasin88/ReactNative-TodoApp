<RNCamera
                              style = {styles.preview}
                               ref = {ref => {this.camera = ref; }}
                               type = {RNCamera.Constants.Type.back}
                               flashMode = {RNCamera.Constants.FlashMode.on}
                               androidCameraPermissionOptions={{title: 'Permission to use camera',
                               message: 'We need your permission to use your camera', buttonPositive: 'OK', buttonNegative:'Cancel',}}
                               androidRecordAudioPermissionOptions={{title: 'Permission to use Audio',
                               message: 'We need your permission to use your audio', buttonPositive: 'OK', buttonNegative:'Cancel',}}
                               onGoogleVisionBarcodesDetected={({barcodes}) => {
                                console.log(barcodes);
                            }}
                         />


               <View style={styles.cameraView}>
                <TouchableOpacity onPress = {this.takePicture.bind(this)} style={styles.capture}>
                    <Text style={{fontSize : 14}}> SNAP </Text>

                </TouchableOpacity>
              </View>

              takePicture = async() => {




                  if(this.camera){
                          try
                          {
                            const options = {quality: 0.5, base64: true};
                            const data = await this.camera.takePictureAsync(options);
                            this.setState({isCameraVisible : true});
                            console.log(data.uri);
                          }
                          catch(error)
                          {
                              console.error(error);
                          }

                      }

                      <View  />
              };

 <View style = {styles.subContainer} >

                        <RNCamera

                        // Older Version RCTCamera supported 'aspect' attribute;
                        //     New Version : RNCamera does not super 'aspeact' attribute
                        //     aspect={RNCamera.constants.Aspect.fill}

                                   ref={(node) => {this.a=node}}
                                   style={styles.preview}>
                                   <Text style={styles.capture} onPress={this.takePicture.bind(this)}> [CAPTURE] </Text>
                                   </RNCamera>

               </View>

              flex: 1,
                  justifyContent: 'flex-end',
                  alignItems: 'center',


ref={(node) => {this.a=node}}
                            <Text style={styles.capture} onPress={this.takePicture.bind(this)}> [CAPTURE] </Text>

noCamera = <View style={styles.subContainer}>
                     <Text>No Camera </Text>
                     </View>;


await RNFetchBlob.fs.mv(data.uri, pictureFolder).then(
                             ()=>{
                                alert('Image Moved');
                                })
                                .catch((e)=> alert('Error'));

takePicture = async(props) =>{

                        let newdir = '/data/DCIM/';

                         {console.log(RNFS.CachesDirectoryPath)};
                         if(this.camera)
                         {
                             const options = {quality: 0.5, base64: true};
                             const data = await this.camera.takePictureAsync(options)
                             {console.log(data.uri)};
                             await RNFetchBlob.fs.exists(data.uri).then(
                                                          (exists)=>{
                                                             if(exists)
                                                             {
                                                                 alert('Image Exists');
                                                             }
                                                             else
                                                             {
                                                                 alert('Image does not exists');
                                                             }
                                                             })
                                                             .catch((e)=> alert('Error'));

                             await RNFetchBlob.fs.mv(data.uri, newdir )
                             .then(() => {alert("File should be moved now")})
                             .catch((e)=> alert(e));
                          }
                      };

                      <TouchableOpacity onPress={this.takePicture.bind(this)} style={styles.capture}>

                      takePicture()
                      {
                          {console.log("Inside Camera")};
                          this.camera
                          .capture()
                          .then(data =>{
                          this.saveImage(data.path)
                          })
                          .catch(err=>{
                              console.error('capture picture error', err);
                          });
                      }


                      <TouchableOpacity
                                                      style={styles.emailButton}

                                           >
                                                 <Image
                                                      style={styles.email}
                                                      source={require('../email.png')}
                                                      onPress={()=>this.props.SendEmail()}>
                                                 </Image>

                                                 <Button
                                                     style = {styles.removeButton}
                                                     title="Remove"
                                                     color = {(todoItem.done) ? 'rgba(200,0,0,0.5)' : 'rgba(255,0,0,1)'}
                                                     onPress = {() => this.props.removeTodo()}
                                                 />

                                           </TouchableOpacity>,